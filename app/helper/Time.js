/**
 * Time related helper methods
 * @class Time
 * @alias Breeze.helper.Time
 */
Ext.define('Breeze.helper.Time', {
    statics: {
        /**
         * Convert minutes into an hours:minutes string
         * @param {Number} minutes Minutes to convert
         * @return {String} Minutes converted to hours and minutes
         */
        minutesToHours: function(minutes){
            var min = minutes % 60;
            var hrs = (minutes - min)/60;
            min = (min.toString().length == 1)? '0' + min : min;
            return [hrs,min].join(':')
        },
        /**
         * Return short date string format of date (MM/DD/YYYY)
         * @param {Date} date Source date object
         * @param {String} sep Optional separator character (default is '/')
         * @return {String} Short formatted date string
         */
        shortDate: function(date, sep){
            var sep = (typeof sep == 'undefined')? '/' : sep;
            return [
                date.getMonth() + 1,
                date.getDate(),
                date.getFullYear()
            ].join(sep);
        },
        /**
         * Minutes class, ported over from homemmade.js
         * @todo TODO: Document Minutes or break into smaller static helper functions
         */
        Minutes: function(minutes,HHMM) {
            this.minutes = minutes;
            this.HHMM = HHMM;
        
            this.display = function () {
                if (this.HHMM == false) {
                    return this.toDecimalHours()
                }
                else {
                    return this.toHoursMinutes();
                }
            }
            this.toHoursMinutes = function() {
                var signstring = '';
                if (this.minutes < 0) {
                    signstring = '-';
                    this.minutes = Math.abs(this.minutes);
                }
                var finalminutes = this.minutes % 60;
        
                this.minutes = this.minutes - finalminutes;
                var hours = this.minutes / 60;
                return signstring + hours + ':' + this.padDigits( Math.round(finalminutes),2);
            }
        
            this.toDecimalHours = function() {
                var myreturn = this.minutes / 60;
                return myreturn.toFixed(2);
            }
            
           this.padDigits = function(number, digits) {
                return Array(Math.max(digits - String(number).length + 1, 0)).join(0) + number;
            }
        },
        /**
         * Strips the API breaking trailing 'Z' from the end of a date.toISOString() call
         * @todo TODO: Decide if this function is needed
         * @param {String} isoDateString Date string generated by toISOString method
         * @return {String} input string with trailing 'Z' cut off
         */
        stripISODate: function(isoDateString){
            if(isoDateString.endsWith('Z')){
                return isoDateString.substr(0,isoDateString.length-1);
            } else {
                return isoDateString;
            }
        },

        loadTimely: function(){
            if(!Date.toUTC){
    
                /**
                 * Constant values passable to Date toUTC method's 'out' option
                 */
                Date.UTC_OUT = {
                    // Output as Date object
                    DATE: 0,
                    // Output as String
                    STRING: 1
                };
    
                /**
                 * Constant values passable to Date toUTC method's 'format' option
                 */
                Date.UTC_FORMAT = {
                    // UTC formatting (as per toUTCDate())
                    UTC: 0,
                    // ISO formatting (as per toISODate())
                    ISO: 1
                };
    
                /**
                 * Advanced toUTC function supporting forcing time zone, output as Date or String,
                 * and outputting in stripped ISO format
                 * @param {Object} options Object providing optional set of options:
                 *  - out (Date.UTC_OUT): Output type (string or date) [default DATE]
                 *  - format (Date.UTC_FORMAT): Format for string, specifying whether to use toUTC
                 *      or toISO methods [default UTC]
                 *  - strip (boolean): If true and using ISO style string out, strip trailing 'Z'
                 *      [default false]
                 *  - forceZone (boolean): If true, rebuild date using getUTCxyz methods [default false]
                 * @return {Date|String} Date object or date string constructed using provided options
                 */
                Date.prototype.toUTC = function (options) {
                    var output = (options && options.out) ? options.out : Date.UTC_OUT.DATE,
                        format = (options && options.format) ? options.format : Date.UTC_FORMAT.UTC,
                        strip = (options && options.strip) ? options.strip : false,
                        forceZone = (options && options.forceZone) ? options.forceZone : false,
                        date = new Date(this);
    
                    // forceZone true, so rebuild date obj using getUTCxyz methods
                    if (forceZone) {
                        date = new Date(
                            date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(),
                            date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds()
                        );
                    }
    
                    // Requested output as date object, so go ahead and return
                    if(output == Date.UTC_OUT.DATE){
                        return date;
                    }
    
                    // Remainder of code pertains to string output
    
                    if(format == Date.UTC_FORMAT.ISO){
                        // Requested ISO-style string output format
                        var string = date.toISOString();
                        if(strip){
                            // Requested stripping trailing 'Z'
                            string = string.substr(0, string.length-1);
                        }
    
                        // return string form of date
                        return string;
                    } else {
                        // Requested UTC-style string output format
                        
                        // return UTC style string
                        return date.toUTCString();
                    }
    
                    // Shouldn't be possible to reach this point
                    return null;
                };
            }
        }
    }
});